"use client";
import React, { useCallback, useState } from "react";
import FileUpload from "./FileUpload";
import ConversionProgress from "./ConversionProgress";
import DownloadButton from "./DownloadButton";
import ImageGrid from "./ImagesGrid";
import "pdfjs-dist/web/pdf_viewer.css";
import { GlobalWorkerOptions, getDocument } from "pdfjs-dist"

const MainComponent = () => {
  const [file, setFile] = useState<File | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [conversionProgress, setConversionProgress] = useState(0);
  const [images, setImages] = useState<string[]>([]);
  const convertToImages = async (pdfFile: File) => {
    if (typeof window !== "undefined") {
      GlobalWorkerOptions.workerSrc =
        "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.0.279/pdf.worker.min.js";
      //   GlobalWorkerOptions.workerSrc = "/pdf.worker.min.mjs";
    }
    const pdfBuffer = await pdfFile.arrayBuffer();
    const loadingTask = getDocument({ data: pdfBuffer });
    const pdf = await loadingTask.promise;
    const imagesArray = [];

    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const viewport = page.getViewport({ scale: 3.0 });
      const canvas = document.createElement("canvas");
      const context = canvas.getContext("2d");

      if (context) {
        canvas.width = viewport.width;
        canvas.height = viewport.height;
        const renderContext = {
          canvasContext: context,
          viewport: viewport,
        };
        await page.render(renderContext).promise;
        imagesArray.push(canvas.toDataURL("image/png", 1.0));
      } else {
        console.error("Failed to get canvas context");
      }

      setConversionProgress(Math.round((i / pdf.numPages) * 100));
    }

    setImages(imagesArray);
  };
  const handleFileSelect = useCallback((selectedFile: File) => {
    setFile(selectedFile);
    // Simulate upload progress
    let progress = 0;
    const interval = setInterval(() => {
      progress += 10;
      setUploadProgress(progress);
      if (progress >= 100) {
        clearInterval(interval);
        convertToImages(selectedFile);
      }
    }, 200);
  }, []);
  const handleDownloadAll = () => {
    images.forEach((image, index) => {
      const link = document.createElement("a");
      link.href = image;
      link.download = `converted_page_${index + 1}.png`;
      link.click();
    });
  };

  const handleDownloadSingle = (image: string, index: number) => {
    const link = document.createElement("a");
    link.href = image;
    link.download = `converted_page_${index + 1}.png`;
    link.click();
  };
  return (
    <div className="bg-white shadow-xl rounded-lg p-8">
      <FileUpload
        onFileSelect={handleFileSelect}
        uploadProgress={uploadProgress}
      />
      {conversionProgress > 0 && conversionProgress < 100 && (
        <ConversionProgress progress={conversionProgress} />
      )}
      {images.length > 0 && (
        <div>
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-semibold text-gray-800">
              Converted Images
            </h2>
            <DownloadButton onClick={handleDownloadAll}>
              Download All
            </DownloadButton>
          </div>
          <ImageGrid images={images} onDownloadSingle={handleDownloadSingle} />
        </div>
      )}
    </div>
  );
};

export default MainComponent;
