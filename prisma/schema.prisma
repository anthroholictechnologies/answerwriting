generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// provided by the prisma adapter
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Manually added for verification of emails and reset password features 
  emailVerificationTokens EmailVerificationToken[]
  forgetPasswordTokens    ForgetPasswordToken[]

  answers      Answer[]
  subscription Subscription?
  orders       Order[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

// Manually created tables.
model EmailVerificationToken {
  id             String   @id @default(cuid())
  token          String   @unique
  userId         String   @map("user_id")
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model ForgetPasswordToken {
  id             String   @id @default(cuid())
  token          String   @unique
  userId         String   @map("user_id")
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forget_password_tokens")
}

enum Exam {
  GS1
  GS2
  GS3
  GS4

  @@map("exams")
}

model Subject {
  id        String   @id @default(cuid())
  name      String   @unique
  exam      Exam
  topics    String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  subjectCriterias SubjectCriteria[]

  @@index([exam])
  @@map("subjects")
}

// Applies to every subject and is static 

model BaseCriteria {
  id        String   @id @default(cuid())
  parameter String
  logic     String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("base_criteria")
}

model SubjectCriteria {
  id        String   @id @default(cuid())
  subjectId String   @map("subject_id")
  parameter String
  logic     String[]
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("subject_criteria")
}

model Answer {
  id             String   @id @default(cuid())
  question       String
  marks          String
  exam           Exam
  evaluationJson Json     @map("evaluation_json")
  userId         String   @map("user_id")
  imagesPath     String[] @map("images_path")
  pdfPath        String   @map("pdf_path")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

enum PlanName {
  FREE
  PRO

  @@map("plan_name")
}

enum Duration {
  ANNUAL
  HALF_YEARLY
  QUARTERLY
  MONTHLY

  @@map("duration")
}

model Plan {
  id       String    @id @default(uuid())
  name     PlanName
  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("plans")
}

model Product {
  id                 String   @id @default(uuid())
  planId             String   @map("plan_id")
  plan               Plan     @relation(fields: [planId], references: [id])
  duration           Duration @map("duration")
  discountPercentage Int      @map("discount_percentage")
  totalPrice         Int      @map("total_price")

  orders Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

enum TransactionStatus {
  // Transaction is started when the user is at pay screen infront of the payment gateway
  STARTED
  // Transaction is completed when the user pays for the order and payment is successfull
  COMPLETED
  // Cancelled by the user, if user goes back from the gateway screen and creates a new order
  CANCELLED
  // If the payment failes then the order is in the failed state
  FAILED
  // If the payment is made and confirmation is pending from the user
  PENDING

  @@map("transaction_status")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED

  @@map("subcsription_status")
}

model Subscription {
  id String @id @default(cuid())

  orderId String @unique @map("order_id")
  order   Order? @relation(fields: [orderId], references: [id])

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  activationDate DateTime? @map("activation_date")
  expiryDate     DateTime? @map("expiry_date")

  history SubscriptionHistory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model SubscriptionHistory {
  id             String             @id @default(cuid())
  subscriptionId String             @map("subscription_id")
  subscription   Subscription       @relation(fields: [subscriptionId], references: [id])
  status         SubscriptionStatus

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscription_history")
}

model Order {
  id String @id @default(cuid())

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  transactionId String       @unique @map("transaction_id")
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  subscription Subscription?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@index([userId])
  @@index([productId])
  @@map("orders")
}

model Transaction {
  id     String @id @default(cuid())
  amount Int

  cancellationReason    String? @map("cancellation_reason")
  paymentResultJSON     Json?   @map("payment_result_json")
  paymentInitiationJSON Json?   @map("payment_initiation_json")

  order     Order?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  history TransactionStatusHistory[]

  @@map("transactions")
}

model TransactionStatusHistory {
  id                    String            @id @default(cuid())
  status                TransactionStatus
  transactionId         String            @map("transaction_id")
  transaction           Transaction       @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transaction_status_history")
}

model PhonePeAuthToken {
  id                   String   @id @default(cuid())
  accessToken          String   @map("access_token")
  encryptedAccessToken String   @map("encrypted_access_token")
  expiresIn            Int?     @map("expires_in")
  issuedAt             Int      @map("issued_at")
  expiresAt            Int      @map("expires_at")
  sessionExpiresAt     Int      @map("session_expires_at")
  tokenType            String   @map("token_type")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("phone_pay_auth_token")
}
