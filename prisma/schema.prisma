generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// provided by the prisma adapter
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Manually added for verification of emails and reset password features 
  emailVerificationTokens EmailVerificationToken[]
  forgetPasswordTokens    ForgetPasswordToken[]

  answers Answer[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

// Manually created tables.
model EmailVerificationToken {
  id             String   @id @default(cuid())
  token          String   @unique
  userId         String   @map("user_id")
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model ForgetPasswordToken {
  id             String   @id @default(cuid())
  token          String   @unique
  userId         String   @map("user_id")
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forget_password_tokens")
}

enum Exam {
  GS1
  GS2
  GS3
  GS4

  @@map("exams")
}

model Subject {
  id        String   @id @default(cuid())
  name      String   @unique
  exam      Exam
  topics    String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  subjectCriterias SubjectCriteria[]

  @@index([exam])
  @@map("subjects")
}

// Applies to every subject and is static 

model BaseCriteria {
  id        String   @id @default(cuid())
  parameter String
  logic     String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("base_criteria")
}

model SubjectCriteria {
  id        String   @id @default(cuid())
  subjectId String   @map("subject_id")
  parameter String
  logic     String[]
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("subject_criteria")
}

model Answer {
  id             String   @id @default(cuid())
  question       String
  marks          String
  exam           Exam
  evaluationJson Json     @map("evaluation_json")
  userId         String   @map("user_id")
  imagesPath     String[] @map("images_path")
  pdfPath        String   @map("pdf_path")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

enum PlanType {
  FREE
  PRO

  @@map("plan_type")
}

enum Duration {
  ANNUAL
  HALF_YEARLY
  QUATERLY
  MONTHLY

  @@map("duration")
}

model SubscriptionPlan {
  id        String   @id @default(uuid())
  name      PlanType
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  billingOptions BillingOption[]

  @@map("subscription_plan")
}

model BillingOption {
  id                 String           @id @default(uuid())
  planId             String           @map("plan_id")
  plan               SubscriptionPlan @relation(fields: [planId], references: [id])
  duration           Duration         @map("duration")
  discountPercentage Int              @map("discount_percentage")
  totalPrice         Int              @map("total_price")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  @@map("billing_option")
}
